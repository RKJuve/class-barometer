<!DOCTYPE html>
<html>
<head>
  <title>CF Class Barometer</title>

  {{!-- jQuery --}}
  <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>
  {{!-- underscore --}}
  <script src="lib/underscore.js"></script>
  {{!-- backbone --}}
  <script src="lib/backbone.js"></script>
  {{!-- handlebars --}}
  <script src="lib/handlebars.js"></script>
  {{!-- bring in socket.io --}}
  <script src="/socket.io/socket.io.js"></script>
  {{!-- backbone App --}}
  <script src="main.js"></script>
  <style>
  body {
  padding: 3em;
  font-family: 'Open Sans', sans-serif;
  font-size: 1em;
}

textarea {
  resize: none;
}

.inlineBlock {
 display: inline-block;
}

.topAligned {
 vertical-align: top;
}
</style>
</head>

<body>
  <h2>really fun placeholder</h2>
  <div id='messages'>
    <div class="inlineBlock">
      <span> Your name: </span>
      <input type="text", value="Anonymous" id="name">
    </br>
    <form id="messageForm">
      <textarea id="outgoingMessage" rows="4" cols="50", placeholder="Share something!" maxlength="200"></textarea>
        <input type="button", value="Share", disabled="true" id="send">
      </form>
      <div class="inlineBlock topAligned">
        Participants: </br>
        <div id="participants">
        </div>
        <div id="messages">
        </div>


  <form action="">
    <button id="joinClass" type="button">Join Class</button>
    <select name="clientCond">
      <option value="ready">Ready</option>
      <option value="notReady">Not Ready</option>
      <option value="needHelp" selected>Need Help</option>
      <option value="success">Success</option>
    </select>
    <textarea name="clientComment">
      
    </textarea>
  </form>
  <div id='dropzone'></div>
  <script>
  $(document).ready(function() {
    var socket = io.connect(window.location.origin);
    var sessionId = '';

    //Helper function to update the participants' list
    function updateParticipants(participants) {
      $('#participants').html('');
        for (var i = 0; i < participants.length; i++) {
          $('#participants').append('<span id="' + participants[i].id + '">' +
          participants[i].name + ' ' + (participants[i].id === sessionId ? '(You)' : '') + '<br /></span>');
    } 
    }

    socket.on("connect", function() {
      sessionId = socket.socket.sessionid;
      console.log('Connected ' + sessionId);
      socket.emit('newUser', {id: sessionId, name: $('#name').val()});
    });

    socket.on('newConnection', function (data) {    
      updateParticipants(data.participants);
    });

    socket.on('userDisconnected', function(data) {
      $('#' + data.id).remove();
    });

    socket.on('nameChanged', function (data) {
      $('#' + data.id).html(data.name + ' ' + (data.id === sessionId ? '(You)' : '') + '<br />');
    });

    socket.on('incomingMessage', function (data) {
      var message = data.message;
      var name = data.name;
      $('#messages').prepend('<b>' + name + '</b><br />' + message + '<hr />');
    });

    socket.on('error', function (reason) {
      console.log('Unable to connect to server', reason);
    });

    function sendMessage() {
      var outgoingMessage = $('#outgoingMessage').val();
      var name = $('#name').val();
      $.ajax({
        url:  '/message',
        type: 'POST',
        dataType: 'json',
        data: {message: outgoingMessage, name: name}
      });
    }

    function outgoingMessageKeyDown(event) {
      if (event.which == 13) {
        event.preventDefault();
        if ($('#outgoingMessage').val().trim().length <= 0) {
          return;
        }
        sendMessage();
        $('#outgoingMessage').val('');
      }
    }

    // Helper function to disable/enable Send button
    function outgoingMessageKeyUp() {
      var outgoingMessageValue = $('#outgoingMessage').val();
      $('#send').attr('disabled', (outgoingMessageValue.trim()).length > 0 ? false : true);
    }

     /*
    When a user updates his/her name, let the server know by
    emitting the "nameChange" event
    */
    function nameFocusOut() {
      var name = $('#name').val();
      socket.emit('nameChange', {id: sessionId, name: name});
    }
    console.log('setup');
    /* Elements setup */
    $('#outgoingMessage').on('keydown', outgoingMessageKeyDown);
    $('#outgoingMessage').on('keyup', outgoingMessageKeyUp);
    $('#name').on('focusout', nameFocusOut);
    $('#send').on('click', sendMessage);


  });

    $("#joinClass").on("click", function(e){
      e.preventDefault();
      
      

      
      
      socket.on("update", function(data){
        if (!App.classroom) {
          App.classroom = new App.Classroom();
        }
        var temp = [];
        _.each(data, function(elem, index, list) {
          temp.push({ id: index, status: elem.status, comment: elem.comment });
        });

        App.classroom.reset(temp);

        if (App.classroomView) {
          App.classroomView.el.innerHTML = '';
          App.classroomView.render();
        } else {
          App.classroomView = new App.ClassroomView({
            collection: App.classroom
          }); 
        }


      });
      $("[name='clientCond']").on("change", function(e) {
        socket.emit("setStatus", $("[name='clientCond']").val() );
      });
      $("[name='clientComment']").on("change", function(e) {
        socket.emit("setComment", $("[name='clientComment']").val() );
      });
    })
  </script>
</body>
</html>